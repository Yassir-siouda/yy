{"ast":null,"code":"var _jsxFileName = \"/Users/yassirsiouda/Desktop/shop-main/src/compenent/Menu/Menu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport supabase from '../../supabase'; // Assurez-vous que le chemin est correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    checkConnection();\n  }, []);\n  async function checkConnection() {\n    try {\n      const {\n        res,\n        error\n      } = await supabase.from('Connexion') // Utilisez une table existante pour vérifier la connexion\n      .select();\n      if (error) {\n        throw error;\n      }\n      console.log(res);\n      setIsConnected(true);\n    } catch (error) {\n      console.error('Erreur lors de la connexion à Supabase:', error.message);\n      setIsConnected(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: isConnected ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Connexion \\xE0 Supabase r\\xE9ussie!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\xC9chec de la connexion \\xE0 Supabase.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X8xpX3k6aXdyWkMXjkSdizyzA6Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","App","_s","isConnected","setIsConnected","checkConnection","res","error","from","select","console","log","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yassirsiouda/Desktop/shop-main/src/compenent/Menu/Menu.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport supabase from '../../supabase'; // Assurez-vous que le chemin est correct\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    checkConnection();\n  }, []);\n\n  async function checkConnection() {\n    try {\n      const { res, error } = await supabase\n        .from('Connexion') // Utilisez une table existante pour vérifier la connexion\n        .select();\n\n      if (error) {\n        throw error;\n      }\n\n      console.log( res);\n      setIsConnected(true);\n    } catch (error) {\n      console.error('Erreur lors de la connexion à Supabase:', error.message);\n      setIsConnected(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {isConnected ? (\n        <h1>Connexion à Supabase réussie!</h1>\n      ) : (\n        <h1>Échec de la connexion à Supabase.</h1>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACdQ,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,eAAeA,CAAA,EAAG;IAC/B,IAAI;MACF,MAAM;QAAEC,GAAG;QAAEC;MAAM,CAAC,GAAG,MAAMT,QAAQ,CAClCU,IAAI,CAAC,WAAW,CAAC,CAAC;MAAA,CAClBC,MAAM,CAAC,CAAC;MAEX,IAAIF,KAAK,EAAE;QACT,MAAMA,KAAK;MACb;MAEAG,OAAO,CAACC,GAAG,CAAEL,GAAG,CAAC;MACjBF,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAACK,OAAO,CAAC;MACvER,cAAc,CAAC,KAAK,CAAC;IACvB;EACF;EAEA,oBACEJ,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBX,WAAW,gBACVH,OAAA;MAAAc,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEtClB,OAAA;MAAAc,QAAA,EAAI;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC1C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CAlCQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}